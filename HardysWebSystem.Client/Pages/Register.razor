@page "/register"
@layout LoginLayout
@inject NavigationManager NavigationManager
@inject IdentityAuthenticationStateProvider AuthStateProvider

<h1 class="h2 font-weight-normal login-title">
    Hardys Web System
</h1>

<EditForm class="form-signin" OnValidSubmit="OnSubmit" Model="RegisterParameters">
    <DataAnnotationsValidator/>
    <h4 class="font-weight-normal text-center">Create Account</h4>

    <label for="inputUsername" class="sr-only">User Name</label>
    <InputText id="inputUsername" class="form-control" placeholder="Username" autofocus @bind-Value="@RegisterParameters.UserName"/>
    <ValidationMessage For="@(() => RegisterParameters.UserName)"/>

    <label for="inputPassword" class="sr-only">Password</label>
    <InputText type="password" id="inputPassword" class="form-control" placeholder="Password" @bind-Value="@RegisterParameters.Password"/>
    <ValidationMessage For="@(() => RegisterParameters.Password)"/>

    <label for="inputPasswordConfirm" class="sr-only">Password Confirmation</label>
    <InputText type="password" id="inputPasswordConfirm" class="form-control" placeholder="Password Confirmation" @bind-Value="@RegisterParameters.PasswordConfirm"/>
    <ValidationMessage For="@(() => RegisterParameters.PasswordConfirm)"/>

    <button class="btn btn-lg btn-primary btn-block" type="submit">Create account</button>

    <label class="text-danger">@Error</label>
    <NavLink href="login">
        <h6 class="font-weight-normal text-center">Already have an account? Click here to login</h6>
    </NavLink>
</EditForm>

@functions{

    RegisterParameters RegisterParameters { get; } = new RegisterParameters();
    string Error { get; set; }

    async Task OnSubmit()
    {
        Error = null;
        try
        {
            await AuthStateProvider.Register(RegisterParameters);
            NavigationManager.NavigateTo("");
        }
        catch (Exception ex)
        {
            Error = ex.Message;
        }
    }

}